import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Modal,
  Input,
  Select,
  message,
  Form,
  Popconfirm,
} from "antd";
import axiosClient from "../api/axiosClient";

export default function QuestionPage() {
  const [questions, setQuestions] = useState([]);
  const [subjects, setSubjects] = useState([]);
  const [chapters, setChapters] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [form] = Form.useForm();

  // üîπ L·∫•y danh s√°ch c√¢u h·ªèi
  const loadQuestions = async () => {
    try {
      const res = await axiosClient.get("/questions");
      setQuestions(res.data);
    } catch {
      message.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch c√¢u h·ªèi");
    }
  };

  // üîπ L·∫•y danh s√°ch m√¥n h·ªçc
  const loadSubjects = async () => {
    const res = await axiosClient.get("/subjects");
    setSubjects(res.data);
  };

  // L·∫•y danh s√°ch ch∆∞∆°ng theo m√¥n h·ªçc
  const loadChaptersBySubject = async (subjectId) => {
    const res = await axiosClient.get(`/subjects/${subjectId}/chapters`);
    setChapters(res.data);
  };

  useEffect(() => {
    loadQuestions();
    loadSubjects();
  }, []);

  // üîπ M·ªü modal th√™m m·ªõi
  const showModal = () => {
    setEditingQuestion(null);
    setIsModalOpen(true);
    form.resetFields();
    setChapters([]);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
    form.resetFields();
    setEditingQuestion(null);
  };

  // üîπ T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c√¢u h·ªèi
  const handleSave = async () => {
    try {
      const values = await form.validateFields();

      if (editingQuestion) {
        // N·∫øu ƒëang s·ª≠a
        await axiosClient.put(`/questions/${editingQuestion.id}`, values);
        message.success("C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!");
      } else {
        // N·∫øu ƒëang th√™m m·ªõi
        await axiosClient.post("/questions", values);
        message.success("Th√™m c√¢u h·ªèi th√†nh c√¥ng!");
      }

      setIsModalOpen(false);
      form.resetFields();
      setEditingQuestion(null);
      loadQuestions();
    } catch (err) {
      message.error("L·ªói khi l∆∞u c√¢u h·ªèi");
    }
  };

  // üîπ X√≥a c√¢u h·ªèi
  const handleDelete = async (id) => {
    try {
      await axiosClient.delete(`/questions/${id}`);
      message.success("X√≥a c√¢u h·ªèi th√†nh c√¥ng!");
      loadQuestions();
    } catch {
      message.error("Kh√¥ng th·ªÉ x√≥a c√¢u h·ªèi n√†y");
    }
  };

  // üîπ S·ª≠a c√¢u h·ªèi
  const handleEdit = (record) => {
    setEditingQuestion(record);
    form.setFieldsValue(record);
    setIsModalOpen(true);
    // T·∫£i ch∆∞∆°ng theo m√¥n h·ªçc c·ªßa c√¢u h·ªèi
    if (record.subject_id) {
      loadChaptersBySubject(record.subject_id);
    }
  };

  // üîπ C·∫•u h√¨nh c·ªôt b·∫£ng
  const columns = [
    { title: "ID", dataIndex: "id", width: 60 },
    { title: "M√¥n h·ªçc", dataIndex: "subject_name" },
    { title: "Ch∆∞∆°ng", dataIndex: "chapter_name" },
    { title: "N·ªôi dung", dataIndex: "text" },
    { title: "ƒê√°p √°n ƒë√∫ng", dataIndex: "correct_choice" },
    {
      title: "H√†nh ƒë·ªông",
      render: (_, record) => (
        <>
          <Button type="link" onClick={() => handleEdit(record)}>
            S·ª≠a
          </Button>
          <Popconfirm
            title="X√°c nh·∫≠n x√≥a c√¢u h·ªèi?"
            onConfirm={() => handleDelete(record.id)}
          >
            <Button type="link" danger>
              X√≥a
            </Button>
          </Popconfirm>
        </>
      ),
    },
  ];

  return (
    <div style={{ padding: 24 }}>
      <h2>Ng√¢n h√†ng c√¢u h·ªèi</h2>

      <Button type="primary" onClick={showModal} style={{ marginBottom: 16 }}>
        + Th√™m c√¢u h·ªèi
      </Button>

      <Table dataSource={questions} columns={columns} rowKey="id" />

      <Modal
        title={editingQuestion ? "Ch·ªânh s·ª≠a c√¢u h·ªèi" : "Th√™m c√¢u h·ªèi m·ªõi"}
        open={isModalOpen}
        onOk={handleSave}
        onCancel={handleCancel}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form}>
          <Form.Item
            label="M√¥n h·ªçc"
            name="subject_id"
            rules={[{ required: true, message: "Ch·ªçn m√¥n h·ªçc" }]}
          >
            <Select
              onChange={(subjectId) => {
                form.setFieldsValue({ chapter_id: undefined });
                loadChaptersBySubject(subjectId);
              }}
            >
              {subjects.map((s) => (
                <Select.Option key={s.id} value={s.id}>
                  {s.name}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            label="Ch∆∞∆°ng"
            name="chapter_id"
            rules={[{ required: true, message: "Ch·ªçn ch∆∞∆°ng" }]}
          >
            <Select placeholder="Ch·ªçn ch∆∞∆°ng">
              {chapters.map((c) => (
                <Select.Option key={c.id} value={c.id}>
                  {c.chapter_number}. {c.name}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            label="N·ªôi dung c√¢u h·ªèi"
            name="text"
            rules={[{ required: true, message: "Nh·∫≠p n·ªôi dung c√¢u h·ªèi" }]}
          >
            <Input.TextArea rows={3} />
          </Form.Item>

          <Form.Item
            label="ƒê√°p √°n A"
            name="choice_a"
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="ƒê√°p √°n B"
            name="choice_b"
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="ƒê√°p √°n C"
            name="choice_c"
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="ƒê√°p √°n D"
            name="choice_d"
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="ƒê√°p √°n ƒë√∫ng"
            name="correct_choice"
            rules={[{ required: true, message: "Ch·ªçn ƒë√°p √°n ƒë√∫ng" }]}
          >
            <Select>
              <Select.Option value="A">A</Select.Option>
              <Select.Option value="B">B</Select.Option>
              <Select.Option value="C">C</Select.Option>
              <Select.Option value="D">D</Select.Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
